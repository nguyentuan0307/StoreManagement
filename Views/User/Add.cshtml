@model List<Role>
@{
    ViewData["Title"] = "Add User Page";
    List<Role> roles = Model;
}
@using ComputerRepair.Models;

<form action="/User/Add" method="post" name="form1">
    <div class="text-center">
        <h1 class="display-4">Add User Page</h1>
    </div>
    <div class="mb-3">
        <label for="FullName" class="form-label">FullName</label>
        <input type="text" class="form-control" id="FullName" name="FullName" required />
    </div>
    <div class="mb-3">
        <label for="Email" class="form-label">Email</label>
        <input type="text" class="form-control" id="Email" name="Email" required />
    </div>
    <div class="mb-3">
        <label for="Phone" class="form-label">Phone</label>
        <input type="text" class="form-control" id="Phone" name="Phone" required />
        <label id="labelPhone"></label>
    </div>
    <div class="mb-3">
        <label for="Address" class="form-label">Address</label>
        <input type="text" class="form-control" id="Address" name="Address" required />
    </div>
    <div class="mb-3">
        <label for="RoleID" class="form-label">Role</label>
        <select class="form-select" id="RoleID" name="RoleID">
            @foreach (var role in roles)
            {
                <option value="@role.RoleID">@role.RoleName</option>
            }
        </select>
    </div>
    <div class="mb-3">
        <label for="Username" class="form-label">Username</label>
        <input type="text" class="form-control" id="Username" name="Username" required />
        <label id="alert-box"></label>
    </div>
    <div class="mb-3">
        <label for="Password" class="form-label">Password</label>
        <input type="text" class="form-control" id="Password" name="Password" required />
    </div>
    <button type="submit" class="btn btn-primary" id="addUserBtn">Submit</button>
</form>

<script>
    let inputUsername = document.getElementById("Username");

    inputUsername.addEventListener("blur", function () {
        let username = inputUsername.value;
        let checkHasUser = "@Url.Action("CheckHasUser", "User")" + "?username=" + username;

        fetch(checkHasUser)
            .then(response => {
                if (response.ok) {
                    return response.text();
                }
                throw new Error("Network response was not ok.");
            })
            .then(data => {
                let alertBox = document.getElementById("alert-box");
                alertBox.innerHTML = data;
                alertBox.classList.remove("d-none");
                if (data == "Username is already taken."){
                    document.getElementById('addUserBtn').disabled = false;
                    inputUsername.focus();
                }else{
                    document.getElementById('addUserBtn').disabled = true;
                }
            })
            .catch(error => {
                console.error("Error fetching data: ", error);
            });
    });

    function validatePhone(event) {
        const phoneInput = event.target;
        const phone = phoneInput.value;

        if (isNaN(phone)) {
            phoneInput.value = phone.slice(0, -1);
            return;
        }

        if (phone.startsWith("00") || !phone.startsWith("0")) {
            document.getElementById("labelPhone").innerText = "Invalid phone format";
        } else {
            document.getElementById("labelPhone").innerText = "";
        }
    }

    const phoneInput = document.getElementById("Phone");
    phoneInput.addEventListener("input", validatePhone);
    phoneInput.addEventListener("blur", validatePhone);

</script>